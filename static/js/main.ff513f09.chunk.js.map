{"version":3,"sources":["components/Header.js","components/Searchbar.js","components/TableEl.js","components/Table.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Searchbar","prop","type","placeholder","name","onChange","handleSubmit","TableEl","props","scope","alt","src","image","phone","email","dob","Table","users","map","user","key","axios","get","App","useState","search","setSearch","setUsers","ogUser","setOGUser","useEffect","API","then","res","userArr","i","data","results","length","userObj","picture","thumbnail","first","last","moment","date","format","push","filterByName","newUsers","filter","toLowerCase","includes","e","preventDefault","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ff513f09.chunk.js","sourcesContent":["import React from 'react';\nimport '../index.css';\n\nfunction Header() {\n    return(\n\n        <nav className='navbar d-flex justify-content-center'>\n            <ul className='nav flex-column text-center'>\n                <li className='nav-item'>\n                    <span className='navbar-brand h1'>Employee Directory</span>\n                </li>\n                <li className='nav-item text-light mb-3'>\n                    <span className='h6'>Use the search bar to narrow your results by name.</span>\n                </li>\n            </ul>\n        </nav>\n\n    )\n};\n\nexport default Header;","import React from 'react';\n\nfunction Searchbar(prop) {\n    return (\n\n        <div className='container-fluid pt-3 pb-3 searchBar'>\n            <div className='row'>\n                <div className='col-4'></div>\n                <div className='col-4'>\n                    <form>\n                        <input \n                        className='form-control' \n                        type='text' \n                        placeholder='Search'\n                        name='search'\n                        onChange={prop.handleSubmit}\n                        ></input>\n                    </form>\n                </div>\n                <div className='col-4'></div>\n            </div>\n        </div>\n\n    )\n};\n\nexport default Searchbar;","import React from 'react';\n\nfunction TableEl(props) {\n    return(\n\n        <tr>\n            <th scope='row'><img alt='Headshot' src={props.image} className='img-fluid' /></th>\n            <td>{props.name} </td>\n            <td>{props.phone} </td>\n            <td>{props.email} </td>\n            <td>{props.dob} </td>\n        </tr>    \n\n    )\n};\n\nexport default TableEl;","import React from 'react';\nimport TableEl from './TableEl';\n\nfunction Table(props) {\n\n    return(\n\n        <div className='container-fluid mt-3 table-responsive-sm'>\n            <table className='table table-striped'>\n                <thead className='thead-dark'>\n                    <tr>\n                    <th scope='col'>Image</th>\n                    <th scope='col'><button>Name</button></th>\n                    <th scope='col'><button>Phone</button></th>\n                    <th scope='col'><button>Email</button></th>\n                    <th scope='col'><button>DOB</button></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {props.users.map(user => (\n                        <TableEl \n                        image={user.image}\n                        name={user.name}\n                        phone={user.phone}\n                        email={user.email}\n                        dob={user.dob}\n                        key={user.name}\n                        />\n                    ))}\n                    \n                </tbody>\n            </table>\n        </div>\n\n    )\n};\n\nexport default Table;","import axios from 'axios';\n\nexport default {\n  getRandomEmployees: function() {\n    return axios.get('https://randomuser.me/api/?results=75&nat=us&seed=8b2435c44546afad');\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Searchbar from './components/Searchbar';\nimport Table from './components/Table';\nimport API from \"./utils/API\";\nimport moment from 'moment';\n\nfunction App() {\n  const [search, setSearch] = useState(\"\");\n  const [users, setUsers] = useState([]);\n  const [ogUser, setOGUser] = useState([]);\n\n  useEffect(() =>{\n    API.getRandomEmployees()\n    .then(res => {\n\n      let userArr = [];\n\n      for(let i=0; i < res.data.results.length; i++) {\n\n        let userObj = {\n          image: \"\",\n          name: \"\",\n          phone: \"\",\n          email: \"\",\n          dob: \"\"\n        };\n\n        userObj.image = res.data.results[i].picture.thumbnail;\n        userObj.name = `${res.data.results[i].name.first} ${res.data.results[i].name.last}`;\n        userObj.phone = res.data.results[i].phone;\n        userObj.email = res.data.results[i].email;\n        userObj.dob = moment(res.data.results[i].dob.date).format(\"MMM Do YYYY\");\n\n        userArr.push(userObj);\n      }\n\n      setUsers(userArr);\n      setOGUser(userArr);\n      \n    });\n  },[])\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearch(e.target.value);\n    filterByName(search);\n  };\n\n  const filterByName = (search) => {\n    if (search === \"\") {\n      setUsers(ogUser);\n    } else {\n      const newUsers = users.filter(user => user.name.toLowerCase().includes(search));\n    setUsers(newUsers);\n    };\n  }\n\n  return (\n    \n    <div>\n      <Header />\n      <Searchbar handleSubmit={handleSubmit} setSearch={setSearch}/>\n      <Table \n      users={users}\n      />\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}